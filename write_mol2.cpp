#include <stdio.h>
#include <string.h> //clangini
#include <string> //clangini
//#include <stdlib.h>

#ifndef _STRLENGTH
#define _STRLENGTH 500
#endif

void write_mol2(char *WriPat,char *WriNam,int xxAtNu,int xxBdNu,char **xxAtEl,
                float **xxCoor,char **xxAtTy,float *xxPaCh,int **xxBdAr,
                char **xxBdTy,char *FrSubN,char *FrSubC,char **ResN_fr,
                int CurFra)
        /* This function writes an output file in the mol2 format */
{
        FILE *FilePa;
        int i;

        FilePa=fopen(WriPat,"w");

        fprintf(FilePa,"# TRIPOS MOL2 file\n");
        fprintf(FilePa,"# RESN %s\n",&ResN_fr[CurFra][1]);
        fprintf(FilePa,"\n");
        fprintf(FilePa,"@<TRIPOS>MOLECULE\n");
        fprintf(FilePa,"%s",WriNam);
        fprintf(FilePa,"\n");
        fprintf(FilePa," %d %d 1 0 0\n",xxAtNu,xxBdNu);
        fprintf(FilePa,"****\n");
        fprintf(FilePa,"USER_CHARGES\n");
        fprintf(FilePa,"INVALID_CHARGES\n");
        fprintf(FilePa,"\n");
        fprintf(FilePa,"@<TRIPOS>ATOM\n");

        for (i=1;i<=xxAtNu;i++) {
                fprintf(FilePa,"%7d %-8s%10.4f%10.4f%10.4f %-6s 1 ****   %11.5f\n",
                                i,&xxAtEl[i][1],xxCoor[i][1],xxCoor[i][2],xxCoor[i][3],
                                &xxAtTy[i][1],xxPaCh[i]);
        }

        fprintf(FilePa,"\n");
        fprintf(FilePa,"@<TRIPOS>BOND\n");

        for (i=1;i<=xxBdNu;i++) {
                fprintf(FilePa,"%7d%8d%8d %s\n",
                                i,xxBdAr[i][1],xxBdAr[i][2],&xxBdTy[i][1]);
        }

        fprintf(FilePa,"\n");
        fprintf(FilePa,"@<TRIPOS>SUBSTRUCTURE\n");

        fprintf(FilePa,"      1 %-14s 1 GROUP **** %-10s   **** 0",FrSubN,FrSubC);
        fprintf(FilePa,"\n");

        fclose(FilePa);
}



void write_mol2_clus_pproc(int CurFra,int NuPosSdCl,int FrAtNu,char **FrAtTy,
                float ***FrCoPo,int *FrPosAr_sort,char **ResN_fr,
                char **FrFiNa_out,int FrBdNu,char **FrAtEl,
                float *FrPaCh,int **FrBdAr,char **FrBdTy,
                char *FragNa,int *SdClusAr_sort,float *To_s_ro)
        /* This function makes a mol2 format file containing the postprocessed
           positions (of the conserved second clusters) :
           WriPat  the path of the file in which one writes the mol2 format
           FrAtTy  fragment atoms types
           FrCoPo  coordinates to be written
           InToAt  incrementation upon the total number of atoms
           InToBo  incrementation upon the total number of bonds */
{
        FILE *FilePa_1;
        char WriPat[_STRLENGTH],SubName[50];
        int InToAt,i1,i2,InToBo,IntVar1;

        /* Create WriPat and write the first lines */
        sprintf(WriPat,"%s%s%s","./outputs/",&FrFiNa_out[CurFra][1],
                        "_clus_pproc.mol2\0");
        FilePa_1=fopen(WriPat,"w");

        fprintf(FilePa_1,"# TRIPOS MOL2 file generated by SEED\n\n");

        fprintf(FilePa_1,"@<TRIPOS>MOLECULE\n");
        fprintf(FilePa_1,"%s\n",FragNa);
        fprintf(FilePa_1," %d %d %d 0 0\n",FrAtNu*NuPosSdCl,FrBdNu*NuPosSdCl,
                        NuPosSdCl);
        fprintf(FilePa_1,"****\n");
        fprintf(FilePa_1,"USER_CHARGES\n");
        fprintf(FilePa_1,"INVALID_CHARGES\n\n");

        /* Write the atoms */
        fprintf(FilePa_1,"@<TRIPOS>ATOM\n");
        InToAt=0;
        for (i1=1;i1<=NuPosSdCl;i1++) {
                for (i2=1;i2<=FrAtNu;i2++) {
                        InToAt++;
                        fprintf(FilePa_1,"%7d %-8s%10.4f%10.4f%10.4f %-7s%d %s%14.5f\n",
                                        InToAt,&FrAtEl[i2][1],FrCoPo[FrPosAr_sort[i1]][i2][1],
                                        FrCoPo[FrPosAr_sort[i1]][i2][2],FrCoPo[FrPosAr_sort[i1]][i2][3],
                                        &FrAtTy[i2][1],i1,&ResN_fr[CurFra][1],FrPaCh[i2]);
                }
        }

        /* Write the bonds */
        fprintf(FilePa_1,"\n@<TRIPOS>BOND\n");
        InToBo=0;
        for (i1=1;i1<=NuPosSdCl;i1++) {
                for (i2=1;i2<=FrBdNu;i2++) {
                        InToBo++;
                        fprintf(FilePa_1,"%7d%8d%8d %s\n",
                                        InToBo,FrBdAr[i2][1]+(i1-1)*FrAtNu,
                                        FrBdAr[i2][2]+(i1-1)*FrAtNu,&FrBdTy[i2][1]);
                }
        }

        /* Write the substructures */
        fprintf(FilePa_1,"\n@<TRIPOS>SUBSTRUCTURE\n");
        IntVar1=1;
        for (i1=1;i1<=NuPosSdCl;i1++) {
                if (SdClusAr_sort[i1]!=IntVar1)
                        IntVar1=SdClusAr_sort[i1];
                sprintf(SubName,"%s%s%d%s",&ResN_fr[CurFra][1],"_",i1,"\0");
                fprintf(FilePa_1,"%7d %-10s%6d GROUP **** %4d     %8.2f 0\n",
                                i1,SubName,(i1-1)*FrAtNu+1,IntVar1,To_s_ro[FrPosAr_sort[i1]]);
        }

        fclose(FilePa_1);

}

/*  C.LANGINI 23-09-2016 START*/
void write_mol2_clus_pproc_syb(int CurFra,int NuPosSdCl,int FrAtNu,char **FrAtTy, char **FrSyAtTy,
                float ***FrCoPo,int *FrPosAr_sort,char **ResN_fr,
                char **FrFiNa_out,int FrBdNu,char **FrAtEl,
                float *FrPaCh,int **FrBdAr,char **FrBdTy,
                char *FragNa,int *SdClusAr_sort,float *To_s_ro)
        /* Same as write_mol2_clus_pproc(...) but uses SYBYL atom types
           and write CHARMM ones in the @<TRIPOS>ALT_TYPE record.
           This function makes a mol2 format file containing the postprocessed
           positions (of the conserved second clusters) :
           WriPat  the path of the file in which one writes the mol2 format
           FrAtTy  fragment atoms types
           FrSyAtTy fragment Sybyl atom types
           FrCoPo  coordinates to be written
           InToAt  incrementation upon the total number of atoms
           InToBo  incrementation upon the total number of bonds */
{
        FILE *FilePa_1;
        char WriPat[_STRLENGTH],SubName[50];
        int InToAt,i1,i2,InToBo,IntVar1,iat;

        /* Create WriPat and write the first lines */
        sprintf(WriPat,"%s%s%s","./outputs/",&FrFiNa_out[CurFra][1],
                        "_clus_pproc.mol2\0");
        FilePa_1=fopen(WriPat,"w");

        fprintf(FilePa_1,"# TRIPOS MOL2 file generated by SEED\n\n");

        fprintf(FilePa_1,"@<TRIPOS>MOLECULE\n");
        fprintf(FilePa_1,"%s\n",FragNa);
        fprintf(FilePa_1," %d %d %d 0 0\n",FrAtNu*NuPosSdCl,FrBdNu*NuPosSdCl,
                        NuPosSdCl);
        fprintf(FilePa_1,"****\n");
        fprintf(FilePa_1,"USER_CHARGES\n");
        fprintf(FilePa_1,"INVALID_CHARGES\n\n");

        /* Write the atoms */
        fprintf(FilePa_1,"@<TRIPOS>ATOM\n");
        InToAt=0;
        for (i1=1;i1<=NuPosSdCl;i1++) {
                for (i2=1;i2<=FrAtNu;i2++) {
                        InToAt++;
                        fprintf(FilePa_1,"%7d %-8s%10.4f%10.4f%10.4f %-7s%d %s%14.5f\n",
                                        InToAt,&FrAtEl[i2][1],FrCoPo[FrPosAr_sort[i1]][i2][1],
                                        FrCoPo[FrPosAr_sort[i1]][i2][2],FrCoPo[FrPosAr_sort[i1]][i2][3],
                                        &FrSyAtTy[i2][1],i1,&ResN_fr[CurFra][1],FrPaCh[i2]);
                }
        }

        /* Write the bonds */
        fprintf(FilePa_1,"\n@<TRIPOS>BOND\n");
        InToBo=0;
        for (i1=1;i1<=NuPosSdCl;i1++) {
                for (i2=1;i2<=FrBdNu;i2++) {
                        InToBo++;
                        fprintf(FilePa_1,"%7d%8d%8d %s\n",
                                        InToBo,FrBdAr[i2][1]+(i1-1)*FrAtNu,
                                        FrBdAr[i2][2]+(i1-1)*FrAtNu,&FrBdTy[i2][1]);
                }
        }

        /* Write the substructures */
        fprintf(FilePa_1,"\n@<TRIPOS>SUBSTRUCTURE\n");
        IntVar1=1;
        for (i1=1;i1<=NuPosSdCl;i1++) {
                if (SdClusAr_sort[i1]!=IntVar1)
                        IntVar1=SdClusAr_sort[i1];
                sprintf(SubName,"%s%s%d%s",&ResN_fr[CurFra][1],"_",i1,"\0");
                fprintf(FilePa_1,"%7d %-10s%6d GROUP **** %4d     %8.2f 0\n",
                                i1,SubName,(i1-1)*FrAtNu+1,IntVar1,To_s_ro[FrPosAr_sort[i1]]);
        }

        /* Write the CHARMM atom types */
        fprintf(FilePa_1,"\n@<TRIPOS>ALT_TYPE\n");
        fprintf(FilePa_1,"CHARMM_ALL_ALT_TYPE_SET\n");
        fprintf(FilePa_1,"CHARMM_ALL %7d %-7s \\\n",1,&FrAtTy[1][1]);
        for(iat=2;iat<FrAtNu;iat++){
                fprintf(FilePa_1,"           %7d %-7s \\\n",iat,&FrAtTy[iat][1]);
        }
        fprintf(FilePa_1,"           %7d %-7s  \n",iat,&FrAtTy[iat][1]);

        fclose(FilePa_1);

}

void append_pose_to_mol2_old(FILE *FilePa,char *FragNa,int FrAtNu,int FrBdNu,int imol,
                char **FrAtEl,float ***FrCoPo,int *FrPosAr_sort,char **FrSyAtTy,
                int CurFra,char **ResN_fr,int **FrBdAr,char **FrBdTy,
                int *SdClusAr_sort,float *To_s_ro,float *FrPaCh)
        //Older version of the function as used previously. clangini
        /* This function appends a single pose as a new molecule
           to a mol2 file.
         */
{
        int ii; /*ii=general counter(atom,bond, ...)*/
        int isub=1,IntVar; /*Substructure counter: each molecule has a single substructure*/
        char SubName[50];
        /* Write the Molecule/Pose */
        fprintf(FilePa,"@<TRIPOS>MOLECULE\n");
        fprintf(FilePa,"%s\n",FragNa);
        fprintf(FilePa," %d %d 1 0 0\n",FrAtNu,FrBdNu);/*always include one substructure*/
        fprintf(FilePa,"****\n");
        fprintf(FilePa,"USER_CHARGES\n");
        fprintf(FilePa,"INVALID_CHARGES\n\n");

        /* Write the atoms */
        fprintf(FilePa,"@<TRIPOS>ATOM\n");
        for(ii=1;ii<=FrAtNu;ii++){
                fprintf(FilePa,"%7d %-8s%10.4f%10.4f%10.4f %-7s%d %s%14.5f\n",
                                ii,&FrAtEl[ii][1],FrCoPo[FrPosAr_sort[imol]][ii][1],
                                FrCoPo[FrPosAr_sort[imol]][ii][2],FrCoPo[FrPosAr_sort[imol]][ii][3],
                                &FrSyAtTy[ii][1],isub,&ResN_fr[CurFra][1],FrPaCh[ii]);
        }

        /* Write the bonds */
        fprintf(FilePa,"\n@<TRIPOS>BOND\n");
        for (ii=1;ii<=FrBdNu;ii++) {
                fprintf(FilePa,"%7d%8d%8d %s\n",
                                ii,FrBdAr[ii][1],FrBdAr[ii][2],&FrBdTy[ii][1]);
        }

        /* Write the substructures */
        fprintf(FilePa,"\n@<TRIPOS>SUBSTRUCTURE\n");
        IntVar=1;
        if (SdClusAr_sort[imol]!=IntVar)
                IntVar=SdClusAr_sort[imol];
        sprintf(SubName,"%s%s%d%s",&ResN_fr[CurFra][1],"_",imol,"\0");
        fprintf(FilePa,"%7d %-10s%6d GROUP **** %4d     %8.2f 0\n",
                        isub,SubName,1,IntVar,To_s_ro[FrPosAr_sort[imol]]);

}


void write_mol2_clus_pproc_separate(int CurFra,int NuPosSdCl,int FrAtNu,char **FrAtTy,
                char **FrSyAtTy,float ***FrCoPo,int *FrPosAr_sort,
                char **ResN_fr,char **FrFiNa_out,int FrBdNu,char **FrAtEl,
                float *FrPaCh,int **FrBdAr,char **FrBdTy,
                char *FragNa,int *SdClusAr_sort,float *To_s_ro)
        /* Same as write_mol2_clus_pproc_syb(...) but writes different poses
           as different molecules.
           This function makes a mol2 format file containing the postprocessed
           positions (of the conserved second clusters) :
           WriPat  the path of the file in which one writes the mol2 format
           FrAtTy  fragment atoms types
           FrSyAtTy fragment Sybyl atom types
           FrCoPo  coordinates to be written
           InToAt  incrementation upon the total number of atoms
           InToBo  incrementation upon the total number of bonds */
{
        FILE *FilePa_1;
        char WriPat[_STRLENGTH];/*,SubName[50];*/
        int /*InToAt,i1,i2,InToBo,IntVar1,*/iat;
        int imol; /*imol=counter on the poses/molecules*/

        /* Create WriPat and write the first lines */
        sprintf(WriPat,"%s%s%s","./outputs/",&FrFiNa_out[CurFra][1],
                        "_clus_pproc.mol2\0");
        FilePa_1=fopen(WriPat,"w");
        fprintf(FilePa_1,"# TRIPOS MOL2 file generated by SEED\n\n");

        for(imol=1;imol<=NuPosSdCl;imol++){
                append_pose_to_mol2_old(FilePa_1,FragNa,FrAtNu,FrBdNu,imol,FrAtEl,FrCoPo,
                                FrPosAr_sort,FrSyAtTy,CurFra,ResN_fr,FrBdAr,FrBdTy,
                                SdClusAr_sort,To_s_ro,FrPaCh);
        }



        /* Write the bonds
           fprintf(FilePa_1,"\n@<TRIPOS>BOND\n");
           InToBo=0;
           for (i1=1;i1<=NuPosSdCl;i1++) {
           for (i2=1;i2<=FrBdNu;i2++) {
           InToBo++;
           fprintf(FilePa_1,"%7d%8d%8d %s\n",
           InToBo,FrBdAr[i2][1]+(i1-1)*FrAtNu,
           FrBdAr[i2][2]+(i1-1)*FrAtNu,&FrBdTy[i2][1]);
           }
           }*/

        /* Write the substructures
           fprintf(FilePa_1,"\n@<TRIPOS>SUBSTRUCTURE\n");
           IntVar1=1;
           for (i1=1;i1<=NuPosSdCl;i1++) {
           if (SdClusAr_sort[i1]!=IntVar1)
           IntVar1=SdClusAr_sort[i1];
           sprintf(SubName,"%s%s%d%s",&ResN_fr[CurFra][1],"_",i1,"\0");
           fprintf(FilePa_1,"%7d %-10s%6d GROUP **** %4d     %8.2f 0\n",
           i1,SubName,(i1-1)*FrAtNu+1,IntVar1,To_s_ro[FrPosAr_sort[i1]]);
           }*/

        /* Write the CHARMM atom types */
        fprintf(FilePa_1,"\n@<TRIPOS>ALT_TYPE\n");
        fprintf(FilePa_1,"CHARMM_ALL_ALT_TYPE_SET\n");
        fprintf(FilePa_1,"CHARMM_ALL %7d %-7s \\\n",1,&FrAtTy[1][1]);
        for(iat=2;iat<FrAtNu;iat++){
                fprintf(FilePa_1,"           %7d %-7s \\\n",iat,&FrAtTy[iat][1]);
        }
        fprintf(FilePa_1,"           %7d %-7s  \n",iat,&FrAtTy[iat][1]);

        fclose(FilePa_1);

}

/* This function appends the new fragment/pose to the output mol2 file */
void append_to_mol2(int CurFra,int NuPosSdCl,int FrAtNu,char **FrAtTy,
                    char **FrSyAtTy,float ***FrCoPo,int *FrPosAr_sort,
                    char **SubNa,char *FrFiNa_out,int FrBdNu,char **FrAtEl,
                    float *FrPaCh,int **FrBdAr,char **FrBdTy,
                    char *FragNa,int *SdClusAr_sort,float *To_s_ro,char *WriPat)
        /* This function appends a single fragment/pose as a new molecule
           to to the mol2 output file.
         */
{
        int ii; /*ii=general counter(atom,bond, ...)*/
        //int IntVar; /* We do not use the substructure field any more */
        /*char SubName[50];*/

        FILE *FilePa;
        /*char WriPat[_STRLENGTH];*//*,SubName[50];*/
        int iat;
        int imol; /*imol=counter on the poses/molecules*/
        int isub = 1; /*clangini*/
        /* Create WriPat and open file to append lines */
        /*sprintf(WriPat,"%s%s%s","./outputs/",&FrFiNa_out[1], *//* should give the possibility to */
                        /*"_clus_pproc.mol2\0");*/               /*use another output folder? */
        FilePa=fopen(WriPat,"a"); /* open file in append mode*/
        /* fprintf(FilePa_1,"# TRIPOS MOL2 file generated by SEED\n\n"); move to main!*/

        for(imol=1;imol<=NuPosSdCl;imol++){
                /* Write the Molecule/Pose */
                fprintf(FilePa,"@<TRIPOS>MOLECULE\n");
                fprintf(FilePa,"%s\n",FragNa);
                //fprintf(FilePa,"%s_%06d\n",FragNa,imol); // add number of the pose. clangini
                fprintf(FilePa," %d %d 1 0 0\n",FrAtNu,FrBdNu);/*always include one substructure*/
                fprintf(FilePa,"****\n");
                fprintf(FilePa,"USER_CHARGES\n");
                fprintf(FilePa,"INVALID_CHARGES\n");
                fprintf(FilePa,"Pose: %d Cluster: %d TotEn: %8.2f\n",
                        imol,SdClusAr_sort[imol],To_s_ro[FrPosAr_sort[imol]]);// Comment line. clangini

                /* Write the atoms */
                fprintf(FilePa,"@<TRIPOS>ATOM\n");
                for(ii=1;ii<=FrAtNu;ii++){
                        fprintf(FilePa,"%7d %-8s%10.4f%10.4f%10.4f %-7s%d %s%14.5f\n",
                                        ii,&FrAtEl[ii][1],FrCoPo[FrPosAr_sort[imol]][ii][1],
                                        FrCoPo[FrPosAr_sort[imol]][ii][2],FrCoPo[FrPosAr_sort[imol]][ii][3],
                                        &FrSyAtTy[ii][1],isub,&SubNa[ii][1],FrPaCh[ii]);
                }

                /* Write the bonds */
                fprintf(FilePa,"@<TRIPOS>BOND\n");
                for (ii=1;ii<=FrBdNu;ii++) {
                        fprintf(FilePa,"%7d%8d%8d %s\n",
                                        ii,FrBdAr[ii][1],FrBdAr[ii][2],&FrBdTy[ii][1]);
                }

                /* Do not write the substructures any more */
                /*fprintf(FilePa,"\n@<TRIPOS>SUBSTRUCTURE\n");
                IntVar=1;
                if (SdClusAr_sort[imol]!=IntVar)
                        IntVar=SdClusAr_sort[imol];
                sprintf(SubName,"%s%s%d%s",&ResN_fr[CurFra][1],"_",imol,"\0");
                fprintf(FilePa,"%7d %-10s%6d GROUP **** %4d     %8.2f 0\n",
                                isub,SubName,1,IntVar,To_s_ro[FrPosAr_sort[imol]]);*/

                /* Write the CHARMM atom types */
                fprintf(FilePa,"@<TRIPOS>ALT_TYPE\n");
                fprintf(FilePa,"CHARMM_ALL_ALT_TYPE_SET\n"); /*This has to be changed according to input*/
                fprintf(FilePa,"CHARMM_ALL");/*same as above*/
                for(iat = 1; iat <= FrAtNu; iat++){
                        fprintf(FilePa," %d %s",iat,&FrAtTy[iat][1]);
                }
                fprintf(FilePa,"\n");
                /* if want to split into different lines use the following */
                /*for(iat=2;iat<FrAtNu;iat++){
                        fprintf(FilePa_1,"           %7d %-7s \\\n",iat,&FrAtTy[iat][1]);
                }
                fprintf(FilePa_1,"           %7d %-7s  \n",iat,&FrAtTy[iat][1]);*/
        }

        fclose(FilePa);
}

void append_pose_to_mol2(FILE *FilePa,char *FragNa,/*int FragNa_count,*/
                int FrAtNu,int FrBdNu,int imol,
                char **FrAtEl,float ***FrCoPo,int Fr_nu,char **FrSyAtTy,
                char **FrAtTy,int CurFra,int **FrBdAr,char **FrBdTy,
                int SdClu,float To_s_ro,float *FrPaCh,char **SubNa,
                std::string const&AlTySp)
        /* This function appends a single pose as a new molecule
           to a mol2 file. */
{
  int ii; /*ii=general counter(atom,bond, ...)*/
  int iat;
  char AlTySp_c[_STRLENGTH]; //Consider to add a check on the sting length.
                             //clangini
  fprintf(FilePa,"@<TRIPOS>MOLECULE\n");
  fprintf(FilePa,"%s\n",FragNa);
  //if (FragNa_count > 1){
  //  fprintf(FilePa,"%s_%d\n",FragNa,FragNa_count);
  //} else {
  //  fprintf(FilePa,"%s\n",FragNa);
  //}
  fprintf(FilePa," %d %d 1 0 0\n",FrAtNu,FrBdNu);/*always include one substructure ??*/
  fprintf(FilePa,"****\n");
  fprintf(FilePa,"USER_CHARGES\n");
  fprintf(FilePa,"INVALID_CHARGES\n");
  fprintf(FilePa,"Pose: %3d Cluster: %3d TotEn: %8.2f Fr_nu: %6d\n",imol,SdClu,To_s_ro,Fr_nu);

  /* Write the atoms */
  fprintf(FilePa,"@<TRIPOS>ATOM\n");
  for(ii=1;ii<=FrAtNu;ii++){
    fprintf(FilePa,"%7d %-8s%10.4f%10.4f%10.4f %-7s%d %s%14.5f\n",
            ii,&FrAtEl[ii][1],FrCoPo[Fr_nu][ii][1],
            FrCoPo[Fr_nu][ii][2],FrCoPo[Fr_nu][ii][3],
            &FrSyAtTy[ii][1],1,&SubNa[ii][1],FrPaCh[ii]); //isub==1 always
  }

  /* Write the bonds */
  fprintf(FilePa,"@<TRIPOS>BOND\n");
  for (ii=1;ii<=FrBdNu;ii++) {
          fprintf(FilePa,"%7d%8d%8d %s\n",
                          ii,FrBdAr[ii][1],FrBdAr[ii][2],&FrBdTy[ii][1]);
  }
  /* Do not write the substructures any more */

  /* Write the CHARMM atom types */
  fprintf(FilePa,"@<TRIPOS>ALT_TYPE\n");
  //fprintf(FilePa,"CHARMM_ALL_ALT_TYPE_SET\n"); /*This has to be changed according to input*/
  //fprintf(FilePa,"CHARMM_ALL");/*same as above*/
  strcpy(AlTySp_c, AlTySp.c_str());
  fprintf(FilePa,"%s\n",strcat(AlTySp_c,"_ALT_TYPE_SET"));
  fprintf(FilePa,"%s",AlTySp.c_str());
  for(iat = 1; iat <= FrAtNu; iat++){
          fprintf(FilePa," %d %s",iat,&FrAtTy[iat][1]);
  }
  fprintf(FilePa,"\n");

}

void append_pose_to_mol2(FILE *FilePa,char *FragNa,int FrAtNu,int FrBdNu,int imol,
                char **FrAtEl,float **FrCoPo,int Fr_nu,char **FrSyAtTy,
                char **FrAtTy,int CurFra,int **FrBdAr,char **FrBdTy,
                int SdClu,float To_s_ro,float *FrPaCh,char **SubNa,
                std::string const&AlTySp)
        /* This function appends a single pose as a new molecule
           to a mol2 file.
           ATTENTION: This is an overloaded function where
           FrCoPo is passed as **float and not as ***float
           At the moment this is not actually used by the program */
{
  int ii; /*ii=general counter(atom,bond, ...)*/
  int iat;
  char AlTySp_c[_STRLENGTH]; //Consider to add a check on the sting length.
                             //clangini
  fprintf(FilePa,"@<TRIPOS>MOLECULE\n");
  fprintf(FilePa,"%s\n",FragNa);
  fprintf(FilePa," %d %d 1 0 0\n",FrAtNu,FrBdNu);/*always include one substructure ??*/
  fprintf(FilePa,"****\n");
  fprintf(FilePa,"USER_CHARGES\n");
  fprintf(FilePa,"INVALID_CHARGES\n");
  fprintf(FilePa,"Pose: %3d Cluster: %3d TotEn: %8.2f Fr_nu: %6d\n",imol,SdClu,To_s_ro,Fr_nu);

  /* Write the atoms */
  fprintf(FilePa,"@<TRIPOS>ATOM\n");
  for(ii=1;ii<=FrAtNu;ii++){
    fprintf(FilePa,"%7d %-8s%10.4f%10.4f%10.4f %-7s%d %s%14.5f\n",
            ii,&FrAtEl[ii][1],FrCoPo[ii][1],
            FrCoPo[ii][2],FrCoPo[ii][3],
            &FrSyAtTy[ii][1],1,&SubNa[ii][1],FrPaCh[ii]); //isub==1 always
  }

  /* Write the bonds */
  fprintf(FilePa,"@<TRIPOS>BOND\n");
  for (ii=1;ii<=FrBdNu;ii++) {
          fprintf(FilePa,"%7d%8d%8d %s\n",
                          ii,FrBdAr[ii][1],FrBdAr[ii][2],&FrBdTy[ii][1]);
  }
  /* Do not write the substructures any more */

  /* Write the CHARMM atom types */
  fprintf(FilePa,"@<TRIPOS>ALT_TYPE\n");
  //fprintf(FilePa,"CHARMM_ALL_ALT_TYPE_SET\n"); /*This has to be changed according to input*/
  //fprintf(FilePa,"CHARMM_ALL");/*same as above*/
  strcpy(AlTySp_c, AlTySp.c_str());
  fprintf(FilePa,"%s\n",strcat(AlTySp_c,"_ALT_TYPE_SET"));
  fprintf(FilePa,"%s",AlTySp.c_str());
  for(iat = 1; iat <= FrAtNu; iat++){
          fprintf(FilePa," %d %s",iat,&FrAtTy[iat][1]);
  }
  fprintf(FilePa,"\n");

}

/* C.LANGINI 2016 END */
